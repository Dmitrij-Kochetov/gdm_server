// Code generated by go-bindata. DO NOT EDIT.
// sources:
// 000001_init_scheme.down.sql (30B)
// 000001_init_scheme.up.sql (245B)

package migrations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_init_schemeDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x28\xca\xcf\x4a\x4d\x2e\x29\xb6\x06\x04\x00\x00\xff\xff\x0d\xe6\x41\x51\x1e\x00\x00\x00")

func _000001_init_schemeDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_init_schemeDownSql,
		"000001_init_scheme.down.sql",
	)
}

func _000001_init_schemeDownSql() (*asset, error) {
	bytes, err := _000001_init_schemeDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_init_scheme.down.sql", size: 30, mode: os.FileMode(0644), modTime: time.Unix(1693399223, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xb9, 0x7c, 0xaf, 0xb1, 0x11, 0xec, 0x47, 0x8d, 0xa2, 0x74, 0xeb, 0x33, 0x8e, 0xad, 0x67, 0xac, 0x81, 0x91, 0x70, 0x9d, 0x90, 0x83, 0xe2, 0x4b, 0xd8, 0x8c, 0x72, 0x29, 0x79, 0x10, 0x67, 0xe}}
	return a, nil
}

var __000001_init_schemeUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\xca\x41\x6b\x83\x30\x18\x87\xf1\xbb\x9f\xe2\x8f\x27\x85\x7d\x89\x37\xfa\xca\xc2\xb2\x64\x8b\xc9\x98\x27\x11\x17\x86\x5b\x1b\xc5\xc6\xef\x5f\xb0\x85\x42\x7b\xe9\xf5\x79\x7e\x95\x65\x72\x0c\x47\x42\x31\x64\x03\x6d\x1c\xf8\x5b\xb6\xae\x45\xbe\xac\xf3\x5f\x18\xd3\x29\x47\x91\x01\x80\xac\x21\x94\x11\xbb\xd1\x5e\xa9\x97\xbd\x1e\xa6\xf8\x8f\x2f\xb2\xd5\x2b\xd9\xbb\x35\xce\x31\x0d\x53\x0c\x6b\x1f\x87\x63\x78\x40\xf0\x5a\x7e\x7a\xbe\xd8\x6d\xe9\xd3\xdc\xff\x0c\x29\x40\x18\xa3\x98\xf4\xcd\xd5\xdc\x90\x57\x0e\x0d\xa9\xf6\xca\xd7\x2d\xc6\x29\xfe\x3e\x65\x3f\xac\x7c\x27\xdb\xe1\x8d\xbb\x42\xd6\x65\x56\x9e\x03\x00\x00\xff\xff\xb2\xf8\x7c\xb9\xf5\x00\x00\x00")

func _000001_init_schemeUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_init_schemeUpSql,
		"000001_init_scheme.up.sql",
	)
}

func _000001_init_schemeUpSql() (*asset, error) {
	bytes, err := _000001_init_schemeUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_init_scheme.up.sql", size: 245, mode: os.FileMode(0644), modTime: time.Unix(1693407828, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x45, 0xbf, 0xa, 0x91, 0xae, 0x5d, 0x68, 0x2c, 0xb, 0xce, 0x71, 0x25, 0x99, 0x8c, 0x5e, 0xf3, 0x5c, 0xe5, 0x10, 0x82, 0xd1, 0x21, 0x4, 0xf3, 0x90, 0x28, 0x20, 0x4a, 0x47, 0x2f, 0xbb, 0xa4}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_init_scheme.down.sql": _000001_init_schemeDownSql,
	"000001_init_scheme.up.sql":   _000001_init_schemeUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_init_scheme.down.sql": {_000001_init_schemeDownSql, map[string]*bintree{}},
	"000001_init_scheme.up.sql":   {_000001_init_schemeUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
