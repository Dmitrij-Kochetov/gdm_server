// Code generated by go-bindata. DO NOT EDIT.
// sources:
// 000001_init_scheme.down.sql (96B)
// 000001_init_scheme.up.sql (709B)

package migrations

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var __000001_init_schemeDownSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x72\x09\xf2\x0f\x50\x08\x71\x74\xf2\x71\x55\xf0\x74\x53\x70\x8d\xf0\x0c\x0e\x09\x56\x28\x4b\x2d\x2a\xce\xcc\xcf\x2b\xb6\xe6\xc2\x2a\x5d\x50\x94\x9f\x95\x9a\x5c\x12\x9f\x99\x97\x96\x8f\x5f\x49\xb1\x35\x20\x00\x00\xff\xff\x5d\x24\x06\xef\x60\x00\x00\x00")

func _000001_init_schemeDownSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_init_schemeDownSql,
		"000001_init_scheme.down.sql",
	)
}

func _000001_init_schemeDownSql() (*asset, error) {
	bytes, err := _000001_init_schemeDownSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_init_scheme.down.sql", size: 96, mode: os.FileMode(0644), modTime: time.Unix(1693680997, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0xdf, 0xdb, 0x1d, 0x2a, 0xa, 0x4b, 0xec, 0x75, 0x1b, 0x39, 0xfd, 0x5e, 0xf9, 0xe, 0x1a, 0x61, 0xb4, 0xc6, 0x51, 0x54, 0x83, 0xbd, 0x32, 0xcd, 0x9f, 0x4a, 0xd0, 0xfe, 0xd9, 0x66, 0x64, 0xd9}}
	return a, nil
}

var __000001_init_schemeUpSql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x94\x91\x41\x4e\xeb\x30\x10\x40\xf7\x39\xc5\xa8\xab\x56\xfa\x37\xf8\x2b\x27\x9d\x14\x8b\x60\x83\xeb\x20\xba\x8a\xa2\xd8\xad\x0c\x61\x1c\x39\x2e\xe7\x47\x6d\x42\x41\x45\x29\xed\x76\xde\x44\x79\x7e\x93\x29\x64\x1a\x41\xb3\xb4\x40\xe0\x39\x08\xa9\x01\x5f\xf8\x5a\xaf\x61\xd6\x05\xff\x6a\x9b\xd8\xcf\x60\x9e\x00\x00\xf0\x25\x70\xa1\x71\x85\xea\xb8\x26\xca\xa2\xfd\x77\x04\xad\xa3\x37\x78\x66\x2a\xbb\x63\x27\x54\x0c\xa8\xf1\x14\x6b\x47\x36\x54\x54\xbf\xdb\x5f\x4b\x50\x0a\xfe\x54\xe2\xb0\xfb\xa8\xf8\x03\x53\x1b\xb8\xc7\xcd\x9c\x2f\x17\xc9\xe2\x7f\x92\x5c\xe1\x57\x39\xda\xfa\x69\xc7\x51\xc4\xd8\xbe\x09\xae\x8b\xce\xd3\x97\xc5\x00\xf6\x5d\x15\x7d\x65\xea\x68\x21\x95\xb2\x40\x26\xce\xbe\x0c\x7b\x22\x47\xbb\x09\x6a\x6c\x6b\xa3\x35\x13\xf4\xec\x49\xc3\x30\x97\x0a\xf9\x4a\x1c\x86\x70\x98\x82\xc2\x1c\x15\x8a\x0c\x7f\x46\xbf\x2a\xc1\x87\x0d\xbd\xf3\x74\xe1\x44\xa3\xc8\xa9\x95\xb9\xb5\xcf\xf8\x8b\x89\xfb\xfe\x59\xaf\xf1\xb4\x75\x3b\x48\x0b\x99\xde\xdc\xe6\x5b\xfa\x72\xa3\xcf\x00\x00\x00\xff\xff\xcd\x90\x8f\x4c\xc5\x02\x00\x00")

func _000001_init_schemeUpSqlBytes() ([]byte, error) {
	return bindataRead(
		__000001_init_schemeUpSql,
		"000001_init_scheme.up.sql",
	)
}

func _000001_init_schemeUpSql() (*asset, error) {
	bytes, err := _000001_init_schemeUpSqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "000001_init_scheme.up.sql", size: 709, mode: os.FileMode(0644), modTime: time.Unix(1693681155, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x8d, 0x4a, 0xd5, 0x81, 0x8f, 0x6c, 0xc1, 0x89, 0x49, 0x4, 0x78, 0xc3, 0x7b, 0x77, 0xc, 0xb4, 0x9c, 0xee, 0x11, 0x34, 0xff, 0x7, 0x79, 0xe2, 0x37, 0xab, 0x77, 0x91, 0x45, 0xff, 0x72, 0x70}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"000001_init_scheme.down.sql": _000001_init_schemeDownSql,
	"000001_init_scheme.up.sql":   _000001_init_schemeUpSql,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//
//	data/
//	  foo.txt
//	  img/
//	    a.png
//	    b.png
//
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"000001_init_scheme.down.sql": {_000001_init_schemeDownSql, map[string]*bintree{}},
	"000001_init_scheme.up.sql":   {_000001_init_schemeUpSql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = os.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
